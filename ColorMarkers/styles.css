h1 {
  text-align: center;
}

.container {
  /* 目前有两种主要的颜色模型:用于电子设备的叠加RGB(红/绿/蓝)模型，以及用于打印的消减CMYK(青色/品红色/黄色/黑色)模型
  在这个项目中使用RGB模型.这意味着颜色从黑色开始,色值随着红色/绿色和蓝色数值变化而变化.一个简单的方法是使用rgb 函数
  rgb 函数是一个可以输入并执行特定动作的代码.函数接收红色/绿色和蓝色的数值或arguments()参数),并生成一个颜色.
  rgb(red, green, blue);每个色值都是一个从 0 到 255 的数字,0 表示该颜色的 0%，并且是黑色,255 意味着该颜色的 100% */
  background-color: rgb(255, 255, 255);
  padding: 10px 0;
}

.marker {
  height: 25px;
  width: 200px;
  /* 当margin属性有两个值时,它将margin-top和margin-bottom设置为第一个值,margin-left和margin-right设置为第二个值 */
  margin: 10px auto;
}

.rgb-black {
  background-color: rgb(0, 0, 0);
}
.rgb-red {
  background-color: rgb(255, 0, 0);
}
.rgb-green {
  background-color: rgb(0, 255, 0);
}
/* 十六进制颜色值以#字符开头,从0-9和A-F取六个字符.第一对字符代表红色,第二对代表绿色,第三对代表蓝色 */
.hex-green {
  background-color: #00ff00;
}
.rgb-light-green {
  background-color: rgb(0, 127, 0);
}
.hex-light-green {
  background-color: #007f00;
}
.rgb-spring-green {
  background-color: rgb(0, 255, 127);
}
/* 黄绿色 */
.rgb-chartreuse-green {
  background-color: rgb(127, 255, 0);
}
.rgb-blue {
  background-color: rgb(0, 0, 255);
}
/* CSS hsl 函数接受3 个值:0到360 的数字表示色调;0到100的百分比表示饱和度;0到100的百分比表示亮度
如果你想象一个色轮,色调红色是 0 度,绿色是 120 度,蓝色是 240 度
饱和度指纯色的颜色强度从0%或灰色到100%.你必须给饱和度和亮度值添加百分比标志%
亮度是颜色出现的亮度,从 0% 或全黑到 100% 或全白,其中 50% 为中性 */
.hsl-blue {
  background-color: hsl(240, 100%, 50%);
}
.rgb-yellow {
  background-color: rgb(255, 255, 0);
}
/* 蓝绿色/青色 */
.rgb-cyan {
  background-color: rgb(0, 255, 255);
}
/* 品红色 */
.rgb-magenta {
  background-color: rgb(255, 0, 255);
}
/* 橘色 */
.rgb-origin {
  background-color: rgb(255, 127, 0);
}
/* 紫罗兰 */
.rgb-violet {
  background-color: rgb(127, 0, 255);
}
/* 天蓝色 */
.rgb-azure {
  background-color: rgb(0, 127, 255);
}
/* 粉红色的玫瑰色 */
.rgb-rose {
  background-color: rgb(255, 0, 127);
}

/* 可以在元素上使用颜色过渡或渐变色. CSS linear-gradient 函数可让你控制沿线的过渡方向以及使用的颜色
linear-gradient 函数实际上创建了一个 image 元素,并且通常与可以接受图像作为一个值的 background 属性配对 */
.linear-gradient-red-green {
  background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0));
}
.linear-gradient-red-green-blue {
  background: linear-gradient(
    90deg,
    rgb(255, 0, 0),
    rgb(0, 255, 0),
    rgb(0, 0, 255)
  );
}
/* 颜色中间点（color-stop）允许你微调颜色沿渐变线的位置,
 * 它们是像px这样的长度单位,或者是在 linear-gradient 函数中定位颜色的百分比 */
.linear-gradient-red75-green-blue {
  background: linear-gradient(
    90deg,
    rgb(255, 0, 0) 75%,
    rgb(0, 255, 0),
    rgb(0, 0, 255)
  );
}
.linear-gradient-red75-green-blue-direction180 {
  background: linear-gradient(
    180deg,
    rgb(255, 0, 0) 75%,
    rgb(0, 255, 0),
    rgb(0, 0, 255)
  );
}
/* 即使没有颜色中间点,第一种颜色位于渐变线的开头0%，第二种颜色位于中间50%，最后一种颜色位于渐变线的结尾100% */
/* 如果没有为 linear-gradient 函数提供 gradientDirection 参数,则默认情况下,它会从上到下或沿 180 度线排列颜色 */
.linear-gradient-red-green-blue-1 {
  background: linear-gradient(
    rgb(122, 74, 14),
    rgb(245, 62, 113),
    rgb(162, 27, 27)
  );
}
.linear-gradient-blue-hsl {
  background: linear-gradient(
    hsl(186, 76%, 16%),
    hsl(223, 90%, 60%),
    hsl(240, 56%, 42%)
  );
}

.sleeve {
  width: 110px;
  height: 25px;
  background-color: white;
  /* CSS opacity 可以控制元素的透明程度,使用值0或0%元素将完全透明,而在1.0 或100% 时元素将像默认情况下一样完全不透明 */
  opacity: 0.5;
  /* border-left 简写属性允许你同时设置左边框的宽度、样式和颜色。 */
  /* 语法为：border-left: width style color; */
  border-left: 10px double rgba(0, 0, 0, 75%);
}
.sleeve-a {
  width: 110px;
  height: 25px;
  /* 另一种设置元素不透明度的方法是使用 alpha 通道. 与 opacity 属性类似,alpha 通道控制颜色的透明或不透明程度 */
  background-color: rgba(255, 255, 255, 50%);
  border-left: 10px double rgba(0, 0, 0, 75%);
}
/* 创建一个新的 CSS 规则来定位类 cap。 在新规则中，将 width 属性设置为 60px，将 height 设置为 25px。 */
.cap {
  width: 60px;
  height: 25px;
}
.cap,
.sleeve,
.sleeve-a {
  display: inline-block;
}
.red-shadow {
  background: linear-gradient(
    rgb(122, 74, 14),
    rgb(245, 62, 113),
    rgb(162, 27, 27)
  );
  /* box-shadow 属性允许你在元素周围应用一个或多个阴影。 这是基本语法： */
  /* box-shadow: offsetX offsetY blurRadius spreadRadius color; */
  /* offsetX 和 offsetY 都接受数字值，单位是 px 和其他 CSS 单位 */
  /* 正 offsetX 值将阴影向右移动，负值将它向左移动 */
  /* 正 offsetY 值将阴影向下移动，负值将它向上移动 */
  /* 如果你想要 offsetX 和 offsetY 其中一个值为零，或两个都为零（0），那么你不需要添加单位。 每种浏览器都知道零意味着没有变化。 */
  /* 阴影的高度和宽度由应用阴影的元素的高度和宽度决定。 你也可以使用可选的 spreadRadius 值来扩大阴影的范围。 之后会介绍更多。 */
  box-shadow: -5px -5px red;
}
.green-shadow {
  background: linear-gradient(#55680d, #71f53e, #116c31);
  box-shadow: 5px 5px 5px green;
}
.blue-shadow {
  background: linear-gradient(
    hsl(186, 76%, 16%),
    hsl(223, 90%, 60%),
    hsl(240, 56%, 42%)
  );
  box-shadow: 0 0 0 5px blue;
}
